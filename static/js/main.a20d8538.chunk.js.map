{"version":3,"sources":["components/QuoteCard.js","hooks/useQuoteFetcher.js","components/QuoteHolder.js","components/Footer.js","components/App.js","index.js"],"names":["QuoteCard","content","author","mediaQueryList","useRef","matchMedia","getView","useCallback","shouldBeShrinked","view","length","useState","current","matches","setView","getSentenceStyle","fontSize","marginBottom","handleChangeView","mqle","useEffect","mql","addEventListener","removeEventListener","className","alt","src","style","FetchState","FETCH_INIT","FETCH_SUCCESS","FETCH_ERROR","reducerFunction","state","action","type","payload","data","error","isLoading","FETCH_DONE","useQuoteFetcher","deps","useReducer","dispatch","API","abortController","AbortController","signal","a","async","fetch","response","ok","json","getRandomQuote","abort","QuoteHolder","flag","toggleFlag","message","renderSubContent","text","onClick","renderButton","Footer","generateLink","addr","href","target","rel","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a20d8538.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect, useCallback, useRef } from \"react\";\r\n\r\nimport \"./QuoteCard.scss\";\r\n\r\nconst QuoteCard = ({ content, author }) => {\r\n  const mediaQueryList = useRef(\r\n    matchMedia(\"screen and (max-width: 667px) and (max-height: 568px)\")\r\n  );\r\n\r\n  const getView = useCallback(\r\n    shouldBeShrinked => {\r\n      let view = \"normal\";\r\n\r\n      if (content.length >= 225 && shouldBeShrinked) {\r\n        view = \"shrinked\";\r\n      }\r\n\r\n      return view;\r\n    },\r\n    [content]\r\n  );\r\n\r\n  const [view, setView] = useState(() =>\r\n    getView(mediaQueryList.current.matches)\r\n  );\r\n\r\n  const getSentenceStyle = useCallback(\r\n    () =>\r\n      view === \"shrinked\" ? { fontSize: \"16px\", marginBottom: \"10px\" } : null,\r\n    [view]\r\n  );\r\n\r\n  const handleChangeView = useCallback(mqle => setView(getView(mqle.matches)), [\r\n    getView\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const mql = mediaQueryList.current;\r\n\r\n    mql.addEventListener(\"change\", handleChangeView);\r\n\r\n    return () => mql.removeEventListener(\"change\", handleChangeView);\r\n  }, [handleChangeView]);\r\n\r\n  return (\r\n    <div className=\"quote-card\">\r\n      <img\r\n        className=\"quote-card__quote-sign\"\r\n        alt=\"quote sign\"\r\n        src=\"quote.svg\"\r\n      />\r\n      <section className=\"quote-card__body\">\r\n        <p className=\"quote-card__sentence\" style={getSentenceStyle()}>\r\n          {content}\r\n        </p>\r\n        <p className=\"quote-card__author-name\">{author}</p>\r\n      </section>\r\n      <div className=\"quote-card__triangle\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteCard;\r\n","import { useEffect, useReducer, useRef } from \"react\";\r\n\r\nclass FetchState {\r\n  static FETCH_INIT = \"FETCH_INIT\";\r\n  static FETCH_SUCCESS = \"FETCH_SUCCESS\";\r\n  static FETCH_ERROR = \"FETCH_ERROR\";\r\n}\r\n\r\nconst reducerFunction = (state, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case FetchState.FETCH_INIT:\r\n      return { ...state, data: null, error: null, isLoading: true };\r\n    case FetchState.FETCH_DONE:\r\n      return { ...state, data: payload, error: null, isLoading: false };\r\n    case FetchState.FETCH_ERROR:\r\n      return { ...state, data: null, error: payload, isLoading: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useQuoteFetcher = deps => {\r\n  const [state, dispatch] = useReducer(reducerFunction, {\r\n    data: null,\r\n    error: null,\r\n    isLoading: false\r\n  });\r\n\r\n  const API = useRef(\"https://api.quotable.io/random\");\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n\r\n    const getRandomQuote = async () => {\r\n      try {\r\n        dispatch({ type: FetchState.FETCH_INIT });\r\n        const response = await fetch(API.current, { signal });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          dispatch({ type: FetchState.FETCH_DONE, payload: data });\r\n        } else {\r\n          const error = await response.json();\r\n          dispatch({ type: FetchState.FETCH_ERROR, payload: error });\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: FetchState.FETCH_ERROR, payload: error });\r\n      }\r\n    };\r\n\r\n    getRandomQuote();\r\n\r\n    return () => abortController.abort();\r\n  }, deps);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useQuoteFetcher;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport \"./QuoteHolder.scss\";\r\n\r\nimport QuoteCard from \"./QuoteCard\";\r\nimport useQuoteFetcher from \"../hooks/useQuoteFetcher\";\r\n\r\nconst QuoteHolder = () => {\r\n  const [flag, toggleFlag] = useState(false);\r\n\r\n  const { isLoading, data, error } = useQuoteFetcher([flag]);\r\n\r\n  const renderButton = () => {\r\n    let text = \"\";\r\n\r\n    if (data) {\r\n      text = \"Get new quote\";\r\n    } else if (error) {\r\n      text = \"Try again\";\r\n    }\r\n\r\n    return (\r\n      <button\r\n        onClick={() => toggleFlag(!flag)}\r\n        className=\"quote-holder__fetch-btn\"\r\n      >\r\n        {text}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const renderSubContent = () => {\r\n    let content = null;\r\n\r\n    if (data) {\r\n      content = <QuoteCard {...data} />;\r\n    } else if (error) {\r\n      content = (\r\n        <h1 className=\"quote-holder__error-msg\">\r\n          Something went wrong: {error.message}\r\n        </h1>\r\n      );\r\n    } else if (isLoading) {\r\n      content = (\r\n        <h1 className=\"quote-holder__loading-info\">Loading new quote...</h1>\r\n      );\r\n    }\r\n\r\n    return content;\r\n  };\r\n\r\n  return (\r\n    <div className=\"quote-holder\">\r\n      {renderSubContent()}\r\n      {(data || error) && renderButton()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteHolder;\r\n","import React from \"react\";\r\nimport \"./Footer.scss\";\r\n\r\nconst quotableLink = \"https://github.com/lukePeavey/quotable\";\r\nconst apiName = \"Random Quotes API\";\r\n\r\nconst lukePeaveyLink = \"https://github.com/lukePeavey\";\r\nconst apiAuthorName = \"Luke Peavey\";\r\n\r\nconst Footer = () => {\r\n  const generateLink = (addr, text) => (\r\n    <a\r\n      className=\"footer__external-link\"\r\n      href={addr}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      {text}\r\n    </a>\r\n  );\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <p className=\"footer__app-name\">Random Quote Machine by Bart Krolak</p>\r\n      <p className=\"footer__api-info\">\r\n        {generateLink(quotableLink, apiName)}\r\n        {\" by \"}\r\n        {generateLink(lukePeaveyLink, apiAuthorName)}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\n\nimport QuoteHolder from \"./QuoteHolder\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteHolder />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}